<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.mapper.PersonMapper">
<!--    //通过Person的id获取到Person，包括这个Person关联的IdenCard对象[级联查询]-->
<!--    如果配置成resultType="Person"，会发生没有实现级联查询的问题-->
<!--    使用resultMap解决-->
    <resultMap id="PersonResultMap" type="Person">
        <result property="id" column="id"></result>
        <result property="name" column="name"></result>
<!--        association - 复杂类型的关联-->
<!--        property="card" ：表示对Person的card属性进行配置-->
<!--        javaType="IdenCard"：表示card属性的类型-->

        <association property="card" javaType="IdenCard" >
            <result property="id" column="id"></result>
            <result property="card_sn" column="card_sn"></result>
        </association>
    </resultMap>
<!--    方式一-->
    <select id="getPersonById" parameterType="java.lang.Integer" resultMap="PersonResultMap">
        SELECT * FROM `person`,`idencard` WHERE `person`.id = #{id} AND `idencard`.id = `person`.card_id;
    </select>

<!--    方式二-->
<!--        先通过SELECT * FROM `person`,`idencard` WHERE id = #{id} 返回Person信息-->
<!--        再通过返回的card_id值，再次执行操作，得到IdenCard数据-->
    <resultMap id="PersonResultMap2" type="Person">
        <result property="id" column="id"></result>
        <result property="name" column="name"></result>
<!--        方式二的核心思想是将多表联查分解成单表操作。-->
<!--        column="card_id" 是   SELECT * FROM `person`,`idencard` WHERE id = #{id} 返回结果的card_id-->
<!--        该card_id字段会作为实参传入到select="com.mapper.IdenCardMapper.getIdenCardById" 这个方法中-->
        <association property="card" column="card_id" select="com.mapper.IdenCardMapper.getIdenCardById" >
        </association>
    </resultMap>
    <select id="getPersonById2"  parameterType="java.lang.Integer" resultMap="PersonResultMap2">
        SELECT * FROM `person` WHERE `id` = #{id}
    </select>

</mapper>